package org.mycontrib.util.generic.converter;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * Version "Ex" (plus performante) et plus sophistiquee de GenericMapper
 * deleguant des conversions spécifique à un DtoConverter
 */

public abstract class AbstractGenericConverterExV1 extends UltraBasicGenericMapper {
	
	public static Logger logger = LoggerFactory.getLogger(AbstractGenericConverterExV1.class);

	
	public abstract Object getDtoConverter();
	
	private Map<Class,Map<Class,Optional<MethodHandle>>> convSDMap = new HashMap<>();

	static String withFirstLowerCase(String s) {
		return Character.toLowerCase(s.charAt(0)) + s.substring(1);
	}
	
	private <S, D> Optional<MethodHandle> methodHandleForSDConv(Class<S> sourceClass , Class<D> destinationClass){
	try {
		String convertMethodName = withFirstLowerCase(
				sourceClass.getSimpleName() + "To" + destinationClass.getSimpleName());
		logger.debug("convertMethodName="+convertMethodName);
					
		MethodType convertMethType = 
				MethodType.methodType(destinationClass /*returnType*/, sourceClass /*paramType*/);
		MethodHandle handle = MethodHandles.publicLookup().findVirtual(getDtoConverter().getClass(), convertMethodName, convertMethType);
		return Optional.of(handle);
	} catch (Exception e) {
		return Optional.empty();
	}
	}
		
	public <S, D> D map(S source, Class<D> destinationClass) {
		if(source==null)return null;
		D destination = null;
		try {
			Optional<MethodHandle> optionalHandle = null;
			Map<Class,Optional<MethodHandle>> convSDSubMap = convSDMap.get(source.getClass());
			if(convSDSubMap==null){
				logger.debug("add entry in convSDMap for key="+source.getClass().getSimpleName());
				convSDSubMap = new HashMap<Class,Optional<MethodHandle>>();
				convSDMap.put(source.getClass(), convSDSubMap);
			}
			optionalHandle = convSDSubMap.get(destinationClass);
			if(optionalHandle==null){
				logger.debug("add entry in convSDsubMap for key="+destinationClass.getSimpleName());
				optionalHandle = methodHandleForSDConv(source.getClass(),destinationClass);
				convSDSubMap.put(destinationClass,optionalHandle);
			}
			
			if(optionalHandle.isPresent()) {
				// first try With DtoConverter
				logger.debug("conversion using methodHandle ="+optionalHandle.get());
				destination = (D) optionalHandle.get().invoke(getDtoConverter(), source);
			}
			else {
				// second try without GenericMapper (as fault back)
				logger.debug("conversion using GenericMapper ...");
				destination = super.map(source, destinationClass);
			}
		}
		catch (Throwable ex) {
			ex.printStackTrace();
		}
		return destination;
	}

}
